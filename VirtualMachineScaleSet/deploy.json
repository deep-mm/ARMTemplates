{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "VMSetName": {
      "type": "string"
    },
    "nt0applicationStartPort": {
      "type": "int",
      "defaultValue": 20000
    },
    "nt0applicationEndPort": {
      "type": "int",
      "defaultValue": 30000
    },
    "nt0ephemeralStartPort": {
      "type": "int",
      "defaultValue": 49152
    },
    "nt0ephemeralEndPort": {
      "type": "int",
      "defaultValue": 65534
    },
    "nt0fabricTcpGatewayPort": {
      "type": "int",
      "defaultValue": 80
    },
    "nt0fabricHttpGatewayPort": {
      "type": "int",
      "defaultValue": 443
    },
    "subnet0Name": {
      "type": "string",
      "defaultValue": "Subnet-0"
    },
    "subnet0Prefix": {
      "type": "string",
      "defaultValue": "172.17.0.0/27"
    },
    "computeLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "publicIPAddressName": {
      "type": "string",
      "defaultValue": "PublicIP-VM"
    },
    "publicIPAddressType": {
      "type": "string",
      "allowedValues": [
        "Dynamic"
      ],
      "defaultValue": "Dynamic"
    },
    "vmStorageAccountContainerName": {
      "type": "string",
      "defaultValue": "vhds"
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "testadm",
      "metadata": {
        "description": "Remote desktop user Id"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Remote desktop user password. Must be a strong password"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "VNet"
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "172.17.0.0/24"
    },
    "dnsName": {
      "type": "string"
    },
    "nicName": {
      "type": "string",
      "defaultValue": "NIC"
    },
    "lbName": {
      "type": "string",
      "defaultValue": "LoadBalancer"
    },
    "lbIPName": {
      "type": "string",
      "defaultValue": "PublicIP-LB-FE"
    },
    "overProvision": {
      "type": "string",
      "defaultValue": "true"
    },
    "vmImagePublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "VM image Publisher"
      }
    },
    "vmImageOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "VM image offer"
      }
    },
    "vmImageSku": {
      "type": "string",
      "defaultValue": "2016-Datacenter-with-Containers",
      "metadata": {
        "description": "VM image SKU"
      }
    },
    "vmImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "VM image version"
      }
    },
    "loadBalancedAppPort1": {
      "type": "int",
      "defaultValue": 2133,
      "metadata": {
        "description": "Input endpoint1 for the application to use. Replace it with what your application uses"
      }
    },
    "loadBalancedAppPort2": {
      "type": "int",
      "defaultValue": 2133,
      "metadata": {
        "description": "Input endpoint2 for the application to use. Replace it with what your application uses"
      }
    },
    "clusterProtectionLevel": {
      "type": "string",
      "allowedValues": [
        "None",
        "Sign",
        "EncryptAndSign"
      ],
      "defaultValue": "EncryptAndSign",
      "metadata": {
        "description": "Protection level.Three values are allowed - EncryptAndSign, Sign, None. It is best to keep the default of EncryptAndSign, unless you have a need not to"
      }
    },
    "nt0InstanceCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Instance count for node type"
      }
    },
    "vmNodeType0Name": {
      "type": "string",
      "defaultValue": "nttestnd1",
      "maxLength": 9
    },
    "vmNodeType0Size": {
      "type": "string",
      "defaultValue": "Standard_A2"
    },
    "networkSecurityGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Network Security Group."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "networkSecurityGroupSecurityRules": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "storageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "StandardSSD_LRS"
      ],
      "defaultValue": "StandardSSD_LRS",
      "metadata": {
        "description": "Replication option for the VM image storage account"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "storageAccountAccessKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Storage Account Access Key"
      }
    },
    "workspaceIdno": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "agentIpAddr": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "certificateName": {
      "type": "string",
      "defaultValue": "FakeAvNextCA",
      "metadata": {
        "description": "Name of Certificate"
      }
    },
    "env": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "Name of Environment"
      }
    },
    "loc": {
      "type": "string",
      "defaultValue": "emea",
      "metadata": {
        "description": "Name of Location"
      }
    },
    "applicationDiagnosticsStorageAccountName": {
      "type": "string",
      "defaultValue": "[toLower( concat('sflogs', uniqueString(resourceGroup().id),'2'))]",
      "metadata": {
        "description": "Name for the storage account that contains support logs from the cluster"
      }
    },
    "applicationDiagnosticsStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the application diagnostics storage account"
      }
    },
    "workspaceKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Log Analytics Workspace Key"
      }
    }
  },
  "variables": {
    "vmssApiVersion": "2018-04-01",
    "sfrpApiVersion": "2018-02-01",
    "lbApiVersion": "2017-08-01",
    "vNetApiVersion": "2016-12-01",
    "storageApiVersion": "2019-06-01",
    "publicIPApiVersion": "2017-08-01",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
    "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',parameters('networkSecurityGroupName'))]",
    "subnet0Ref": "[concat(variables('vnetID'),'/subnets/',parameters('subnet0Name'))]",
    "lbID0": "[resourceId('Microsoft.Network/loadBalancers', parameters('lbName'))]",
    "lbIPConfig0": "[concat(variables('lbID0'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
    "lbPoolID0": "[concat(variables('lbID0'),'/backendAddressPools/bepool')]",
    "lbProbeID0": "[concat(variables('lbID0'),'/probes/tcpProbe')]",
    "lbHttpProbeID0": "[concat(variables('lbID0'),'/probes/for-https')]",
    "lbNatPoolID0": "[concat(variables('lbID0'),'/inboundNatPools/natpool')]",
    "vmStorageAccountName0": "[toLower(concat(uniqueString(resourceGroup().id), '1', '0' ))]",
    "extCmdToExecute": "[concat('sudo sh run-first.sh ',parameters('env'),' ',parameters('loc'),' ',parameters('certificateName'))]",
    "emptyArray": [
    ],
    "prxExtensionFilesUri": [
      "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/vmscripts/run-first.sh')]",
      "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/vmscripts/ansible-nginx.yml')]",
      "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/vmscripts/',parameters('certificateName'),'.crt')]",
      "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/vmscripts/nginx.conf')]",
      "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/vmscripts/ssl-certs.zip')]"
    ],
    "NSGdiagnosticsMetrics": [
    ],
    "NSGdiagnosticsLogs": [
      {
        "category": "NetworkSecurityGroupEvent",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "NetworkSecurityGroupRuleCounter",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "PublicIpdiagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "PublicIpdiagnosticsLogs": [
      {
        "category": "DDoSProtectionNotifications",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "DDoSMitigationFlowLogs",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "DDoSMitigationReports",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "vNetdiagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "vNetdiagnosticsLogs": [
      {
        "category": "VMProtectionAlerts",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "loadBalancerDiagnosticsMetrics": [

    ],
    "loadBalancerDiagnosticsLogs": [
      {
        "category": "LoadBalancerProbeHealthStatus",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "LoadBalancerAlertEvent",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ]
  },
  "resources": [
    {
      "apiVersion": "[variables('vNetApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet0Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet0Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.KeyVault",
                  "locations": [
                    "[parameters('computeLocation')]"
                  ]
                },
                {
                  "service": "Microsoft.EventHub",
                  "locations": [
                    "[parameters('computeLocation')]"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('publicIPApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('lbIPName')]",
      "location": "[parameters('computeLocation')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsName')]"
        },
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "apiVersion": "[variables('lbApiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[parameters('lbName')]",
      "location": "[parameters('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',parameters('lbIPName'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('lbIPName'))]"
              },
              "privateIPAddressVersion": "IPv4"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "bepool",
            "properties": {
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[variables('lbProbeID0')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBrule-https",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[variables('lbHttpProbeID0')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "TCP-2133",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort1')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort1')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID0'),'/probes/TCP-2133probe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricTcpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "for-https",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricHttpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "TCP-2133probe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort1')]",
              "protocol": "tcp"
            }
          }
        ],
        "outboundRules": [],
        "inboundNatPools": [
          {
            "name": "natpool",
            "properties": {
              "frontendPortRangeStart": 50000,
              "frontendPortRangeEnd": 50119,
              "backendPort": 22,
              "protocol": "Tcp",
              "idleTimeoutInMinutes": 4,
              "enableFloatingIP": false,
              "enableTcpReset": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('vmssApiVersion')]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('VMSetName')]",
      "location": "[parameters('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('lbName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('applicationDiagnosticsStorageAccountName'))]"
      ],
      "properties": {
        "overprovision": "[parameters('overProvision')]",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[parameters('nicName')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(parameters('nicName'),'-defaultIpConfiguration')]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('lbPoolID0')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[variables('lbNatPoolID0')]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('subnet0Ref')]"
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[variables('nsgId')]"
                  },
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[parameters('adminUsername')]",
            "computernamePrefix": "[parameters('vmNodeType0Name')]"
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('https://',parameters('applicationDiagnosticsStorageAccountName'),'.blob.core.windows.net/')]"
            }
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[parameters('vmImagePublisher')]",
              "offer": "[parameters('vmImageOffer')]",
              "sku": "[parameters('vmImageSku')]",
              "version": "[parameters('vmImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('storageAccountType')]"
              },
              "diskSizeGB": 30
            }
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "DependencyAgentLinux",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                  "type": "DependencyAgentLinux",
                  "typeHandlerVersion": "9.10"
                }
              },
              {
                "name": "OMSAgentForLinux",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                  "type": "OmsAgentForLinux",
                  "typeHandlerVersion": "1.7",
                  "settings": {
                    "workspaceId": "[parameters('workspaceIdno')]",
                    "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('VMSetName'))]",
                    "stopOnMultipleConnections": "true"
                  },
                  "protectedSettings": {
                    "workspaceKey": "[parameters('workspaceKey')]"
                  }
                }
              },
              {
                "name": "AppInstall",
                "type": "Microsoft.Compute/virtualMachineScaleSets/extensions",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "forceUpdateTag": "yes",
                  "settings": {
                  },
                  "protectedSettings": {
                    "commandToExecute": "[variables('extCmdToExecute')]",
                    "fileUris": "[variables('prxExtensionFilesUri')]",
                    "storageAccountName": "[parameters('storageAccountName')]",
                    "storageAccountKey": "[parameters('storageAccountAccessKey')]"
                  }
                }
              }
            ]
          },
          "priority": "Regular"
        }
      },
      "sku": {
        "name": "[parameters('vmNodeType0Size')]",
        "capacity": "[parameters('nt0InstanceCount')]",
        "tier": "Standard"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('applicationDiagnosticsStorageAccountName')]",
      "location": "[parameters('computeLocation')]",
      "dependsOn": [],
      "properties": {},
      "kind": "Storage",
      "sku": {
        "name": "[parameters('applicationDiagnosticsStorageAccountType')]"
      }
    },
    {
      "apiVersion": "2020-05-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[parameters('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
      ],
      "properties": {
        "copy": [
          {
            "name": "securityRules",
            "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
            "input": {
              "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
              "properties": {
                "description": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.description]",
                "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]",
                "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                "sourceAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes)]",
                "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                "sourceApplicationSecurityGroups": "[if(empty(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroupIds), json('null'), concat(variables('emptyArray'), array(json(concat('{\"id\": \"', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroupIds[0], '\"', ',', '\"location\": \"', reference(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroupIds[0],'2019-04-01', 'Full').location, '\"}')))))]",
                "destinationApplicationSecurityGroups": "[if(empty(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroupIds), json('null'), concat(variables('emptyArray'), array(json(concat('{\"id\": \"', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroupIds[0], '\"', ',', '\"location\": \"', reference(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroupIds[0],'2019-04-01', 'Full').location, '\"}')))))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticsettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(parameters('networkSecurityGroupName'), '/Microsoft.Insights/service')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
      ],
      "properties": {
        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
        "metrics": "[variables('NSGdiagnosticsMetrics')]",
        "logs": "[variables('NSGdiagnosticsLogs')]"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/providers/diagnosticsettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(parameters('virtualNetworkName'), '/Microsoft.Insights/service')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
        "metrics": "[variables('vNetdiagnosticsMetrics')]",
        "logs": "[variables('vNetdiagnosticsLogs')]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticsettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(parameters('lbIPName'), '/Microsoft.Insights/service')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('lbIPName'))]"
      ],
      "properties": {
        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
        "metrics": "[variables('PublicIpdiagnosticsMetrics')]",
        "logs": "[variables('PublicIpdiagnosticsLogs')]"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers/providers/diagnosticsettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(parameters('lbName'), '/Microsoft.Insights/service')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('lbName'))]"
      ],
      "properties": {
        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
        "metrics": "[variables('loadBalancerDiagnosticsMetrics')]",
        "logs": "[variables('loadBalancerDiagnosticsLogs')]"
      }
    }
  ],
  "outputs": {
    "publicIPAddressResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('lbIPName'))]",
      "metadata": {
        "description": "The Resource id of the resource deployed."
      }
    },
    "vNetResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnet0Name') )]",
      "metadata": {
        "description": "The Resource id of the Virtual Network deployed."
      }
    },
    "publicIpAddress": {
      "type": "string",
      "value": "[reference(parameters('lbIPName')).IpAddress]",
      "metadata": {
        "description": "The Resource id of the Virtual Network deployed."
      }
    }
  }
}