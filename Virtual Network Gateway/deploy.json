{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualNetworkGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the Virtual Network Gateway name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "gatewayPipName": {
      "type": "array" ,
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies the name of the Public IP used by the Virtual Network Gateway. If it's not provided, a '-pip' suffix will be appended to the gateway's name."
      }
    },
    "activeActive": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Value to specify if the Gateway should be deployed in active-active or active-passive configuration"
      }
    },
    "publicIPPrefixId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource Id of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
      }
    },
    "domainNameLabel": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "Optional. DNS name(s) of the Public IP resource(s). If you enabled active-active configuration, you need to provide 2 DNS names, if you want to use this feature. A region specific suffix will be appended to it, e.g.: your-DNS-name.westeurope.cloudapp.azure.com"
      }
    },
    "virtualNetworkGatewayType": {
      "type": "string",
      "allowedValues": [
        "Vpn",
        "ExpressRoute"
      ],
      "metadata": {
        "description": "Required. Specifies the gateway type. E.g. VPN, ExpressRoute"
      }
    },
    "virtualNetworkGatewaySku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "VpnGw1",
        "VpnGw2",
        "VpnGw3",
        "VpnGw1AZ",
        "VpnGw2AZ",
        "VpnGw3AZ",
        "ErGw1AZ",
        "ErGw2AZ",
        "ErGw3AZ"
      ],
      "metadata": {
        "description": "Required. The Sku of the Gateway."
      }
    },
    "vpnType": {
      "type": "string",
      "allowedValues": [
        "PolicyBased",
        "RouteBased"
      ],
      "defaultValue": "RouteBased",
      "metadata": {
        "description": "Required. Specifies the VPN type"
      }
    },
    "vpnGatewayGeneration": {
      "type": "string",
      "allowedValues": [
        "Generation1",
        "Generation2"
      ],
      "defaultValue": "Generation1",
      "metadata": {
        "description": "Optional. Specifies the VPN GW generation."
      }
    },
    "vNetId": {
      "type": "string",
      "metadata": {
        "description": "Required. Virtual Network resource Id"
      }
    },
    "vpnClientAddressPoolPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The IP address range from which VPN clients will receive an IP address when connected. Range specified must not overlap with on-premise network."
      }
    },
    "clientRootCertData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Client root certificate data used to authenticate VPN clients."
      }
    },
    "clientRevokedCertThumbprint": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Thumbprint of the revoked certificate. This would revoke VPN client certificates matching this thumbprint from connecting to the VNet."
      }
    }
  },
  "variables": {
    "zoneRedundantSkus": [
      "VpnGw1AZ",
      "VpnGw2AZ",
      "VpnGw3AZ",
      "ErGw1AZ",
      "ErGw2AZ",
      "ErGw3AZ"
    ],
    "gatewayPipName1": "[if( equals(length(parameters('gatewayPipName')),0), concat(parameters('virtualNetworkGatewayName'), '-pip1'), parameters('gatewayPipName')[0])]",
    "gatewayPipName2": "[if( parameters('activeActive'), if (equals(length(parameters('gatewayPipName')),1), concat(parameters('virtualNetworkGatewayName'), '-pip2'), parameters('gatewayPipName')[1]), '')]",
    "gatewayPipName": "[if( not(empty(variables('gatewayPipName2'))), createArray(variables('gatewayPipName1'), variables('gatewayPipName2')), createArray(variables('gatewayPipName1')))]",
    "gatewayPipId1": "[resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName1'))]",
    "gatewayPipId2": "[if( parameters('activeActive'), resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName2')), resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName1')))]",
    "gatewayPipSku": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Standard', 'Basic')]",
    "gatewayPipAllocationMethod": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Static', 'Dynamic')]",
    "gatewaySubnetId": "[concat(parameters('vNetId'), '/subnets/GatewaySubnet')]",
    "vpnType": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), 'PolicyBased', parameters('vpnType'))]",
    "publicIPPrefix": {
      "id": "[parameters('publicIPPrefixId')]"
    },
    "activePassiveIpConfiguration": [
      {
        "properties": {
          "privateIPAllocationMethod": "Dynamic",
          "subnet": {
            "id": "[variables('gatewaySubnetId')]"
          },
          "publicIPAddress": {
            "id": "[variables('gatewayPipId1')]"
          }
        },
        "name": "vNetGatewayConfig1"
      }
    ],
    "activeActiveIpConfiguration": [
      {
        "properties": {
          "privateIPAllocationMethod": "Dynamic",
          "subnet": {
            "id": "[variables('gatewaySubnetId')]"
          },
          "publicIPAddress": {
            "id": "[variables('gatewayPipId1')]"
          }
        },
        "name": "vNetGatewayConfig1"
      },
      {
        "properties": {
          "privateIPAllocationMethod": "Dynamic",
          "subnet": {
            "id": "[variables('gatewaySubnetId')]"
          },
          "publicIPAddress": {
            "id": "[variables('gatewayPipId2')]"
          }
        },
        "name": "vNetGatewayConfig2"
      }
    ],
    "vpnClientRootCertificates": [
      {
        "name": "RootCert1",
        "properties": {
          "PublicCertData": "[parameters('clientRootCertData')]"
        }
      }
    ],
    "vpmClientRevokedCertificates": [
      {
        "name": "RevokedCert1",
        "properties": {
          "Thumbprint": "[parameters('clientRevokedCertThumbprint')]"
        }
      }
    ],
    "vpnClientConfiguration": {
      "vpnClientAddressPool": {
        "addressPrefixes": [
          "[parameters('vpnClientAddressPoolPrefix')]"
        ]
      },
      "vpnClientRootCertificates": "[if(empty(parameters('clientRootCertData')), json('null'), variables('vpnClientRootCertificates'))]",
      "vpnClientRevokedCertificates": "[if(empty(parameters('clientRevokedCertThumbprint')), json('null'), variables('vpmClientRevokedCertificates'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('gatewayPipName')[copyindex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "pipCopy",
        "count": "[length(variables('gatewayPipName'))]",
        "mode": "Serial"
      },
      "sku": {
        "name": "[variables('gatewayPipSku')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('gatewayPipAllocationMethod')]",
        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixId'))), variables('publicIPPrefix'), json('null'))]",
        "dnsSettings": "[if(equals(length(variables('gatewayPipName')),length(parameters('domainNameLabel'))), json(concat('{\"domainNameLabel\": \"', parameters('domainNameLabel')[copyindex()], '\"}')), json('null'))]"
      }
    }
  ],
  "functions": [
  ],
  "outputs": {
    "virtualNetworkGatewayResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The Resource Group the Virtual Network Gateway was deployed."
      }
    },
    "virtualNetworkGatewayName": {
      "type": "string",
      "value": "[parameters('virtualNetworkGatewayName')]",
      "metadata": {
        "description": "The Name of the Virtual Network Gateway."
      }
    },
    "virtualNetworkGatewayResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('virtualNetworkGatewayName'))]",
      "metadata": {
        "description": "The Resource Id of the Virtual Network Gateway."
      }
    }
  }
}