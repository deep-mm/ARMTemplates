{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Required. Name of the Azure Key Vault"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "accessPolicies": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "Optional. Array of access policies object"
      }
    },
    "enableSoftDelete": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
      }
    },
    "enablePurgeProtection": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
      }
    },
    "vaultSku": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Premium",
        "Standard"
      ],
      "metadata": {
        "description": "Optional. Specifies the SKU for the vault"
      }
    },
    "secretsObject": {
      "type": "secureObject",
      "defaultValue": {
        "secrets": [
        ]
      },
      "metadata": {
        "description": "Optional. All secrets [{\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object]"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "ipRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of IP Rules"
      }
    }
  },
  "variables": {
    "diagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "timeGrain": null,
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ],
    "diagnosticsLogs": [
      {
        "category": "AuditEvent",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[parameters('keyVaultName')]",
      "tags": "[parameters('tags')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabledForDeployment": "true",
        "enabledForTemplateDeployment": "true",
        "enabledForDiskEncryption": "true",
        "enableSoftDelete": "[parameters('enableSoftDelete')]",
        "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": "[parameters('accessPolicies')]",
        "sku": {
          "name": "[parameters('vaultSku')]",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices",
          "ipRules": "[parameters('ipRules')]"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "condition": "[not(empty(parameters('secretsObject').secrets))]",
      "name": "[if(empty(parameters('secretsObject').secrets), concat(parameters('keyVaultName'), '/', 'dummy'), concat(parameters('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName))]",
      "properties": {
        "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[length(parameters('secretsObject').secrets)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(parameters('keyVaultName'), '/Microsoft.Insights/service')]",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ],
      "properties": {
        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('diagnosticsLogs')]"
      }
    }
  ],
  "functions": [
  ],
  "outputs": {
    "keyVaultResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
      "metadata": {
        "description": "The Resource Id of the Key Vault."
      }
    },
    "keyVaultResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group the Key Vault was created in."
      }
    },
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('keyVaultName')]",
      "metadata": {
        "description": "The Name of the Key Vault."
      }
    },
    "keyVaultUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')),'2016-10-01').vaultUri]",
      "metadata": {
        "description": "The URL of the Key Vault."
      }
    }
  }
}
